---
title: "2 shiny apps, para el ocio y el negocio"
subtitle: "R Hispano - Córdoba 2022"
author: "Leonardo Hansa"
format: 
  revealjs:
    width: 960 
    height: 700 
---

## 2 shiny apps, para el ocio y el negocio

1. Un shiny como prototipo de app para reviews de casas de alquiler
2. Un shiny para un juego por equipos desde el móvil

::: {.notes}
Dos shiny apps: una es ocio; la otra es una idea de negocio. La primera es un prototipo de una herramienta que me gustaría tener. La segunda es un juego por equipos al que se pueda acceder desde el móvil.
:::


## caseros

[https://lhansa.shinyapps.io/caseros](https://lhansa.shinyapps.io/caseros)

::: {.notes}
Se juntan dos cosas: vivo de alquiler en Madrid y me gusta mucho Shiny. La situación del alquiler es desesperante. Pero no tengo nada a mi alcance para hacer que los precios bajen. ¿Qué me gustaría en su lugar? Que otros inquilinos pudieran aprovechar mis experiencias en casas en las que ya he estado. Puedo valorar casas en las que he estado, a modo Google Maps o Tripadvisor, comparto esas valoraciones y así pueden apoyarse en ellas para negociar o incluso para buscarse otra cosa. Y otras personas podrían compartir su experiencia. 
No sé desarrollar una herramienta así y me gustaría que alguien lo hiciera. Así que, para mostrar cómo me gustaría que fuera la herramienta, he hecho una propuesta en Shiny. 
:::

## leaflet {background-image="img/caseros-general.png" background-size="90%"}

::: {.notes}
Lo primero que te encuentras al abrir el Shiny es un mapa de leaflet. Leaflet me gusta un montón porque me permite hacer mapas interactivos muy chulos sin tener ni idea de javascript. Este mapa muestra las direcciones en las que hay valoraciones ya hechas. Un comentario: estos no están anonimizados ni simulados, sino inventados. Todo lo que veis aquí es mentira. Solo me interesa el funcionamiento: el prototipo aún no está operativo.
:::

## ggmap

```{r ggmap-data}
#| echo: true
#| eval: false
register_google(key = google_key)
geocode(new_address)
```

::: {.notes}
Para añadir valoraciones hace falta iniciar sesión. Eso de iniciar sesión, ahora mismo, consiste en poner en un cajetín de Shiny una API key de los servicios de Google Maps. Luego el paquete ggmap, a partir de una dirección, devuelve las coordenadas. Y uso esas coordenadas para pintar en leaflet los puntos.
:::

## ggmap {background-image="img/caseros-input.png" background-size="90%"}

::: {.notes}
El usuario introduce la dirección de la casa, la valoración y un comentario. Y su API KEY. Y cuando hace click en añadir valoración...
:::

## ggmap {background-image="img/caseros-new-marker.png" background-size="90%"}

::: {.notes}
Pues eso, se añade una valoración. Es decir, un punto nuevo en el mapa con la valoración del usuario.
Esto por detrás, tras la llamada a ggmap, actualiza un fichero. El Shiny comprueba cada 2 segundos si ese fichero ha sufrido cambios, con reactiveFileReader. Si es así, lee el fichero y actualiza el mapa. 
:::

## leaflet {background-image="img/caseros-ejemplo-review.png" background-size="90%"}

::: {.notes}
Para consultar información no hace falta iniciar sesión. Uno puede hacer click en un marcador y ve la info.
Con leaflet puedes hacer click en estos marcadores y te sale un pop-up con la información que contiene. Pero yo quería tener control desde Shiny, porque así tenía más margen para mostrar la información de un punto. Lo bueno es que leaflet y shiny se entienden muy bien y puedes vincularlos de manera que Shiny sabe dónde está haciendo click el usuario dentro del mapa. 
Eso no solo es útil para mostrar la información del marcador con Shiny, sino que podría guardar un registro de clicks que hacen los usuarios.
:::

## golem

```{r golem}
#| echo: false
fs::dir_tree("~/Projects/caseros")
```

::: {.notes}
Desde hace tiempo monto mis Shinys como paquetes de R. Empecé sin golem, a pelo, pero ya me estoy dejando llevar totalmente por esta herramienta. Al final tienes todo tu Shiny como funciones. El server, el UI, los módulos Shiny, todo son funciones y viven en la carpeta R de tu Shiny. Los desarrolladores argumentan que simplifica el despliegue de Shiny. Porque la instalación de dependencias se hace como en cualquier librería. Pero va más allá.
:::

## plumber

```{r plumber}
#| echo: true
#| eval: false

# plumber.R

#* Return data frame with info
#* @param mark Lower bound mark
#* @serializer unboxedJSON
#* @get /echo
function(mark=0) {
  jsonlite::toJSON(
    caseros::get_reviews_over(mark),
    auto_unbox =TRUE
  )
}

```

::: {.notes}
Shiny es muy mono y muy visual. Pero a veces lo práctico tiene que ser programático. Para eso, es mejor una API que un Shiny. No sé nada de APIs pero la librería plumber me pone muy fácil el montar una. Lo que necesito son los códigos que va a ejecutar la API. Pero es que esos códigos son justo las funciones del Shiny, que las tengo todas en la librería. Así que montar la API, apoyándome en plumber, consiste solamente en hacer llamadas a funciones de mi librería. 
:::

## plumber 

![](img/caseros-api.png)


::: {.notes}
La API no la he hecho pública porque solo me he puesto a hacer minipruebas. Pero está el código en GitHub.
:::

## papelitos

[https://lhansa.shinyapps.io/papelitos/](https://lhansa.shinyapps.io/papelitos)

::: {.notes}
No me da tiempo a hablar de mi segundo Shiny. Solo diré que es un juego por equipos, pensado para acceder desde el móvil y tiene instrucciones cuando entráis. 
Tanto este shiny como el otro viven en una cuenta gratuita de ShinyApps así que el acceso está bastante limitado. Pero todos los códigos están en GitHub.
:::

## cómo puedes jugar

![](img/papelitos-instrus1.png){.absolute left=50 height="500"}
![](img/papelitos-instrus2.png){.absolute left=350 height="500"}
![](img/papelitos-instrus3.png){.absolute right=50 height="500"}

::: {.notes}
Si entras con el móvil, verás una caja con instrucciones. Ahí está el detalle del juego, que ahora no me da tiempo a contar. Pero como ya he dicho, es el que mucha gente llama personajes. Se escriben nombres de personajes en papelitos, y luego hay que adivinar lo que pone en el papel por equipos, haciendo mimíca y cosas de esas.
:::

## cómo puedes jugar


![](img/papelitos-input0.png){.absolute left=50 height="500"}

![](img/papelitos-input1.png){.absolute left=350 height="500"}
![](img/papelitos-input2.png){.absolute right=50 height="500"}

::: {.notes}
Para jugar, cada jugador introduce el nombre de un personaje, o cualquier palabra de una temática acordada y pulsa en el botón. Esto va creando un vector con todos los nombres. 
:::

## pues al lío

![](img/papelitos-input3.png){.absolute left=150 height="500"}
![](img/papelitos-input4.png){.absolute right=150 height="500"}

::: {.notes}
Durante la ronda, la persona a la que le toque explicar el papelito, va sacando nombres del vector, pulsando el botón de "sacar papelito". Una cosa pendiente que me gustaría añadir, y no sé cómo hacer, es poner un temporizador, para no depender de otro móvil para hacer eso.
:::



---------
::: {.r-fit-text style="color: #800080; padding-top: 200px;"}
leonardohansa.com
:::

::: {.notes}
Y para terminar, un favor. Tengo una newsletter y si te suscribes recibirás un correo sobre la relación que tiene programar y montar muebles de Ikea. Responde a ese correo y cuéntame si has usado estas herramientas y qué te han parecido. Será un placer leerte. Muchas gracias.
:::



